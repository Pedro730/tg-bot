# ===============  –í–ê–® –ë–û–¢ + KEEP-ALIVE  ===============
import os
import logging
import datetime
from pathlib import Path

from docx import Document
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.orm import declarative_base, sessionmaker

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, CallbackQueryHandler
)
from telegram.helpers import escape

# -------------------------------------------------
# KEEP-ALIVE (Flask) ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω–æ –≤–Ω—É—Ç—Ä–∏ main.py
# -------------------------------------------------
from flask import Flask
import threading

_flask_app = Flask(__name__)

@_flask_app.route("/")
def _ping():
    return "ok", 200

def keep_alive():
    threading.Thread(
        target=lambda: _flask_app.run(host="0.0.0.0", port=8080),
        daemon=True
    ).start()

# -------------------------------------------------
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -------------------------------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

if not BOT_TOKEN or not ADMIN_ID:
    raise RuntimeError("–£–∫–∞–∂–∏—Ç–µ BOT_TOKEN –∏ ADMIN_ID –≤ Secrets")

# -------------------------------------------------
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
# -------------------------------------------------
DB_URL = "sqlite:///users.db"
engine = create_engine(DB_URL, echo=False, pool_pre_ping=True)
Base = declarative_base()
SessionLocal = sessionmaker(bind=engine, expire_on_commit=False)

class UserRecord(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, unique=True, nullable=False)
    username = Column(String)
    status = Column(String, default="pending")
    requested_at = Column(DateTime, default=datetime.datetime.utcnow)

Base.metadata.create_all(bind=engine)

# -------------------------------------------------
# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------------------------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# -------------------------------------------------
# data.docx
# -------------------------------------------------
DATA_FILE = Path("data.docx")

def create_sample_docx(path: Path):
    doc = Document()
    doc.add_paragraph("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: –ø—Ä–∏–º–µ—Ä")
    doc.add_paragraph("–û–ø–∏—Å–∞–Ω–∏–µ: –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
    doc.save(path)
    logger.info("–°–æ–∑–¥–∞–Ω data.docx")

def load_data(file_path: Path) -> dict:
    if not file_path.exists():
        create_sample_docx(file_path)

    try:
        doc = Document(file_path)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è docx: %s", e)
        return {}

    data, current_keyword = {}, None
    for para in doc.paragraphs:
        text = para.text.strip()
        if text.startswith("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:"):
            current_keyword = text.replace("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:", "").strip().lower()
        elif text.startswith("–û–ø–∏—Å–∞–Ω–∏–µ:") and current_keyword:
            description = text.replace("–û–ø–∏—Å–∞–Ω–∏–µ:", "").strip()
            data[current_keyword] = description
            current_keyword = None
    return data

DATA = load_data(DATA_FILE)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∑–∞–ø–∏—Å–µ–π", len(DATA))

# -------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# -------------------------------------------------
def is_approved(user_id: int) -> bool:
    with SessionLocal() as session:
        user = session.query(UserRecord).filter_by(user_id=user_id).first()
        return bool(user and user.status == "approved")

# -------------------------------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã
# -------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    with SessionLocal() as session:
        record = session.query(UserRecord).filter_by(user_id=user.id).first()
        if record and record.status == "approved":
            await update.message.reply_text(
                "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞. "
                "–í –∫–ª–∞–¥–æ–≤–∫–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç–æ–≤, —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –ª–∏—Ü, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º–æ–º –∏ —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º–æ–º, "
                "–≤ —Ç–æ–º —á–∏—Å–ª–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –ø—Ä–æ–ø–æ–≤–µ–¥–Ω–∏–∫–æ–≤ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π. "
                "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ù–°, –°–Ø –∏ –Ø–í. "
                "–ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –ø–æ –æ–¥–Ω–æ–º—É-–¥–≤—É–º —Å–ª–æ–≤–∞–º, —Ç–∞–∫ –∏ –ø–æ –µ–≥–æ —á–∞—Å—Ç–∏; "
                "–≤—ã–¥–∞—ë—Ç—Å—è 7 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, —É–¥–∞—á–∏ —Ç–µ–±–µ –≤ –ø–æ–∏—Å–∫–∞—Ö."
            )
            return
        if record and record.status == "blocked":
            await update.message.reply_text("‚ùå –í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
            return

        if not record:
            session.add(
                UserRecord(user_id=user.id, username=user.username or "N/A")
            )
            session.commit()

            keyboard = [[InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user.id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
                     f"ID: {user.id}\n"
                     f"–ò–º—è: {user.full_name}\n"
                     f"Username: @{user.username or '‚Äî'}",
                reply_markup=reply_markup
            )

        await update.message.reply_text("üì® –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

async def approve_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.from_user.id != ADMIN_ID:
        return

    user_id = int(query.data.split("_")[1])
    with SessionLocal() as session:
        record = session.query(UserRecord).filter_by(user_id=user_id).first()
        if not record:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        record.status = "approved"
        session.commit()

        await query.edit_message_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω")
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    with SessionLocal() as session:
        records = session.query(UserRecord).all()
        if not records:
            await update.message.reply_text("üìù –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        lines, keyboard = [], []
        for r in records:
            status = "‚úÖ" if r.status == "approved" else ("‚ùå" if r.status == "blocked" else "‚è≥")
            lines.append(f"{status} <b>{r.user_id}</b> ‚Äî {escape(r.username or 'N/A')}")
            keyboard.append([
                InlineKeyboardButton(
                    f"{'–ó–∞–±–ª–æ–∫–∞—Ç—å' if r.status == 'approved' else '–û–¥–æ–±—Ä–∏—Ç—å'} {r.user_id}",
                    callback_data=f"toggle_{r.user_id}"
                )
            ])

        await update.message.reply_text(
            "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n".join(lines),
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def toggle_user_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.from_user.id != ADMIN_ID:
        return

    user_id = int(query.data.split("_")[1])
    with SessionLocal() as session:
        record = session.query(UserRecord).filter_by(user_id=user_id).first()
        if not record:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        old_status = record.status
        if old_status == "approved":
            record.status = "blocked"
            status_text = "üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            notify_text = "‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω."
        else:
            record.status = "approved"
            status_text = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω"
            notify_text = "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!"

        session.commit()
        await query.edit_message_text(status_text)
        try:
            await context.bot.send_message(chat_id=user_id, text=notify_text)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not is_approved(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        query = update.message.text.strip().lower()
        if not query:
            await update.message.reply_text("üîç –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
            return

        matches = [
            (k, v) for k, v in DATA.items()
            if query in k or k in query
        ][:7]

        if not matches:
            await update.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        lines = [f"<b>{escape(k.capitalize())}</b>\n{escape(v)}" for k, v in matches]
        text = "\n\n".join(lines)
        if len(matches) == 7:
            text += "\n\n<i>–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 7 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π</i>"
        await update.message.reply_text(text, parse_mode="HTML")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_message: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§∑‚Äç‚ôÇÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ /start")

# -------------------------------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------------------------------
def main():
    keep_alive()  # –∑–∞–ø—É—Å–∫–∞–µ–º Flask-–ø–∏–Ω–≥–µ—Ä
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("users", users_command))
    application.add_handler(CallbackQueryHandler(approve_callback, pattern="^approve_"))
    application.add_handler(CallbackQueryHandler(toggle_user_status, pattern="^toggle_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Replit")
    application.run_polling()

if __name__ == "__main__":
    main()