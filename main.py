# ===============  –í–ê–® –ë–û–¢ + KEEP-ALIVE  ===============
import os
import logging
import datetime
import hashlib
import asyncio
from pathlib import Path

from docx import Document
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.orm import declarative_base, sessionmaker

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, CallbackQueryHandler, ConversationHandler
)
from telegram.helpers import escape

# ---------- KEEP-ALIVE (Flask) ----------
from flask import Flask
import threading

_flask_app = Flask(__name__)

@_flask_app.route("/")
def _ping():
    return "ok", 200

def keep_alive():
    threading.Thread(
        target=lambda: _flask_app.run(host="0.0.0.0", port=8080),
        daemon=True
    ).start()

# ---------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

if not BOT_TOKEN or not ADMIN_ID:
    raise RuntimeError("–£–∫–∞–∂–∏—Ç–µ BOT_TOKEN –∏ ADMIN_ID –≤ Secrets")

# ---------- –ë–ê–ó–ê –î–ê–ù–ù–´–• ----------
Path("data").mkdir(exist_ok=True)
DB_URL = f"sqlite:///{Path.cwd() / 'data' / 'users.db'}"
engine = create_engine(DB_URL, echo=False, pool_pre_ping=True)
Base = declarative_base()
SessionLocal = sessionmaker(bind=engine, expire_on_commit=False)

class UserRecord(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, unique=True, nullable=False)
    username = Column(String)
    status = Column(String, default="pending")
    requested_at = Column(DateTime, default=datetime.datetime.utcnow)

class SearchHistory(Base):
    __tablename__ = "search_history"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, nullable=False)
    username = Column(String)
    query = Column(String, nullable=False)
    timestamp = Column(DateTime, default=datetime.datetime.utcnow)

Base.metadata.create_all(bind=engine)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ---------- DATA.DOCX ----------
DATA_FILE = Path("data.docx")
CHECKSUM_FILE = Path("data.md5")

def create_sample_docx(path: Path):
    doc = Document()
    doc.add_paragraph("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: –ø—Ä–∏–º–µ—Ä")
    doc.add_paragraph("–û–ø–∏—Å–∞–Ω–∏–µ: –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
    doc.save(path)
    logger.info("–°–æ–∑–¥–∞–Ω data.docx")

def _file_checksum(path: Path) -> str:
    if not path.exists():
        return ""
    with open(path, "rb") as f:
        return hashlib.md5(f.read()).hexdigest()

def load_data(file_path: Path) -> dict:
    if not file_path.exists():
        create_sample_docx(file_path)
    try:
        doc = Document(file_path)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è docx: %s", e)
        return {}
    data, current_keyword = {}, None
    for para in doc.paragraphs:
        text = para.text.strip()
        if text.startswith("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:"):
            current_keyword = text.replace("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:", "").strip().lower()
        elif text.startswith("–û–ø–∏—Å–∞–Ω–∏–µ:") and current_keyword:
            description = text.replace("–û–ø–∏—Å–∞–Ω–∏–µ:", "").strip()
            data[current_keyword] = description
            current_keyword = None
    return data

def rewrite_data_docx():
    doc = Document()
    for key, desc in DATA.items():
        doc.add_paragraph(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {key}")
        doc.add_paragraph(f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc}")
    doc.save(DATA_FILE)
    CHECKSUM_FILE.write_text(_file_checksum(DATA_FILE))

def _notify_all_approved(app: Application, keys: list[str], action: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    action: 'added', 'edited', 'deleted'
    """
    if action not in {"added", "edited", "deleted"}:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π action: {action}")
        return

    with SessionLocal() as session:
        users = session.query(UserRecord).filter_by(status="approved").all()

    for key in keys:
        if action == "deleted":
            msg = f"üîî <b>–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å:</b>\n\n<b>{key.capitalize()}</b>"
        else:
            desc = DATA.get(key, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            action_text = "–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å" if action == "added" else "–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å"
            msg = f"üîî <b>{action_text}:</b>\n\n<b>{key.capitalize()}</b>\n{desc}"

        for user in users:
            try:
                app.bot.send_message(chat_id=user.user_id, text=msg, parse_mode="HTML")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user.user_id}: {e}")

def reload_data_and_notify_if_new(app: Application):
    old_keys = set(DATA.keys())
    new_data = load_data(DATA_FILE)
    new_keys = [k for k in new_data.keys() if k not in old_keys]
    DATA.clear()
    DATA.update(new_data)
    if new_keys:
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–ª—é—á–∏: {new_keys}")
        _notify_all_approved(app, new_keys, "added")

DATA = load_data(DATA_FILE)
rewrite_data_docx()

# ---------- –£–¢–ò–õ–ò–¢–´ ----------
def is_approved(user_id: int) -> bool:
    with SessionLocal() as session:
        user = session.query(UserRecord).filter_by(user_id=user_id).first()
        return bool(user and user.status == "approved")

# ---------- Conversation states ----------
ADD_KEY, ADD_DESC, EDIT_KEY, EDIT_DESC, DELETE_KEY = range(5)
FEEDBACK_TEXT, BROADCAST_TEXT = range(6, 8)

# ---------- Conversation-—Ñ—É–Ω–∫—Ü–∏–∏ ----------
async def add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return ConversationHandler.END
    await update.message.reply_text("üîë –û—Ç–ø—Ä–∞–≤—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:")
    return ADD_KEY

async def add_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["add_key"] = update.message.text.strip().lower()
    await update.message.reply_text("üìù –û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ:")
    return ADD_DESC

async def add_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["add_key"]
    desc = update.message.text.strip()
    DATA[key] = desc
    rewrite_data_docx()
    _notify_all_approved(context.application, [key], "added")
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:\n<b>{key}</b>\n{desc}", parse_mode="HTML")
    context.user_data.clear()
    return ConversationHandler.END

async def edit_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return ConversationHandler.END
    await update.message.reply_text("üîë –û—Ç–ø—Ä–∞–≤—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    return EDIT_KEY

async def edit_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = update.message.text.strip().lower()
    if key not in DATA:
        await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    context.user_data["edit_key"] = key
    await update.message.reply_text(f"üìù –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{DATA[key]}\n\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    return EDIT_DESC

async def edit_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["edit_key"]
    desc = update.message.text.strip()
    DATA[key] = desc
    rewrite_data_docx()
    _notify_all_approved(context.application, [key], "edited")
    await update.message.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ:\n<b>{key}</b>\n{desc}", parse_mode="HTML")
    context.user_data.clear()
    return ConversationHandler.END

async def del_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return ConversationHandler.END
    await update.message.reply_text("üóë –û—Ç–ø—Ä–∞–≤—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    return DELETE_KEY

async def del_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = update.message.text.strip().lower()
    if key not in DATA:
        await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END

    deleted_key = key
    del DATA[key]
    rewrite_data_docx()
    _notify_all_approved(context.application, [deleted_key], "deleted")
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:\n\n<b>{deleted_key}</b>",
        parse_mode="HTML"
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

# ---------- –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ ----------
async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
    return FEEDBACK_TEXT

async def feedback_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.effective_user
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üì© Feedback –æ—Ç {user.full_name} (@{user.username or '‚Äî'} | {user.id}):\n\n{text}"
    )
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
    return ConversationHandler.END

# ---------- –†–ê–°–°–´–õ–ö–ê ----------
async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    return BROADCAST_TEXT

async def broadcast_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    with SessionLocal() as session:
        users = session.query(UserRecord).filter_by(status="approved").all()

    sent = 0
    for user in users:
        try:
            await context.bot.send_message(chat_id=user.user_id, text=text, parse_mode="HTML")
            sent += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.warning(f"–ù–µ –¥–æ—à–ª–æ –¥–æ {user.user_id}: {e}")
    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")
    return ConversationHandler.END

# ---------- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ----------
async def adduser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /adduser <user_id>")
        return
    try:
        user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç id.")
        return
    with SessionLocal() as session:
        user = session.query(UserRecord).filter_by(user_id=user_id).first()
        if user:
            user.status = "approved"
        else:
            session.add(UserRecord(user_id=user_id, username="N/A", status="approved"))
        session.commit()
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ–¥–æ–±—Ä–µ–Ω.")

async def addusers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /addusers <id1> <id2> ...")
        return

    added = []
    with SessionLocal() as session:
        for arg in context.args:
            try:
                uid = int(arg.strip())
            except ValueError:
                continue
            user = session.query(UserRecord).filter_by(user_id=uid).first()
            if user:
                user.status = "approved"
            else:
                session.add(UserRecord(user_id=uid, username="N/A", status="approved"))
            added.append(str(uid))
        session.commit()

    await update.message.reply_text(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏ –æ–¥–æ–±—Ä–µ–Ω–æ: {', '.join(added)}"
    )

# ---------- –ö–û–ú–ê–ù–î–´ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    with SessionLocal() as session:
        record = session.query(UserRecord).filter_by(user_id=user.id).first()
        if record and record.status == "approved":
            await update.message.reply_text(
                "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞. "
                "–í –ë–∏–±–ª–∏–æ—Ç–µ–∫–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç–æ–≤, —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –ª–∏—Ü, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º–æ–º –∏ —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º–æ–º, "
                "–≤ —Ç–æ–º —á–∏—Å–ª–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –ø—Ä–æ–ø–æ–≤–µ–¥–Ω–∏–∫–æ–≤ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π. "
                "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ù–°, –°–Ø –∏ –Ø–í. "
                "–ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –ø–æ –æ–¥–Ω–æ–º—É-–¥–≤—É–º —Å–ª–æ–≤–∞–º, —Ç–∞–∫ –∏ –ø–æ –µ–≥–æ —á–∞—Å—Ç–∏; "
                "–≤—ã–¥–∞—ë—Ç—Å—è 7 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, —É–¥–∞—á–∏ —Ç–µ–±–µ –≤ –ø–æ–∏—Å–∫–∞—Ö."
            )
            return
        if record and record.status == "blocked":
            await update.message.reply_text("‚ùå –í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
            return

        if not record:
            session.add(
                UserRecord(user_id=user.id, username=user.username or "N/A")
            )
            session.commit()

            keyboard = [[InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user.id}")]]
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
                     f"ID: {user.id}\n"
                     f"–ò–º—è: {user.full_name}\n"
                     f"Username: @{user.username or '‚Äî'}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        await update.message.reply_text("üì® –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    with SessionLocal() as session:
        records = session.query(UserRecord).all()
    if not records:
        await update.message.reply_text("üìù –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    lines, keyboard = [], []
    for r in records:
        status = "‚úÖ" if r.status == "approved" else ("‚ùå" if r.status == "blocked" else "‚è≥")
        lines.append(f"{status} <b>{r.user_id}</b> ‚Äî {escape(r.username or 'N/A')}")
        keyboard.append([
            InlineKeyboardButton(
                f"{'–ó–∞–±–ª–æ–∫–∞—Ç—å' if r.status == 'approved' else '–û–¥–æ–±—Ä–∏—Ç—å'} {r.user_id}",
                callback_data=f"toggle_{r.user_id}"
            )
        ])
    await update.message.reply_text(
        "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n".join(lines),
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def approve_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.from_user.id != ADMIN_ID:
        return
    user_id = int(query.data.split("_")[1])
    with SessionLocal() as session:
        record = session.query(UserRecord).filter_by(user_id=user_id).first()
        if not record:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        record.status = "approved"
        session.commit()
    await query.edit_message_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω")
    try:
        context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {user_id}: {e}")

async def toggle_user_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.from_user.id != ADMIN_ID:
        return
    user_id = int(query.data.split("_")[1])
    with SessionLocal() as session:
        record = session.query(UserRecord).filter_by(user_id=user_id).first()
        if not record:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        record.status = "blocked" if record.status == "approved" else "approved"
        session.commit()
    await query.edit_message_text("‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω")

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    with SessionLocal() as session:
        records = session.query(SearchHistory).order_by(SearchHistory.timestamp.desc()).limit(50).all()
    if not records:
        await update.message.reply_text("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞.")
        return
    lines = [
        f"{r.timestamp.strftime('%Y-%m-%d %H:%M')} ‚Äî @{escape(r.username or 'N/A')} ‚Äî <code>{escape(r.query)}</code>"
        for r in records
    ]
    await update.message.reply_text(
        "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):\n\n" + "\n".join(lines),
        parse_mode="HTML"
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    with SessionLocal() as session:
        total_users = session.query(UserRecord).count()
        approved_users = session.query(UserRecord).filter_by(status="approved").count()
        total_searches = session.query(SearchHistory).count()
        today_searches = session.query(SearchHistory).filter(
            SearchHistory.timestamp >= datetime.datetime.utcnow().date()
        ).count()
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {approved_users}\n"
        f"üîç –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {total_searches}\n"
        f"üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today_searches}"
    )

async def list_entries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if not DATA:
        await update.message.reply_text("üì≠ –ë–∞–∑–∞ –ø—É—Å—Ç–∞.")
        return
    keyboard = []
    for key in sorted(DATA):
        keyboard.append([
            InlineKeyboardButton(f"‚úèÔ∏è {key}", callback_data=f"e_{key}"),
            InlineKeyboardButton(f"üóëÔ∏è {key}", callback_data=f"d_{key}")
        ])
    await update.message.reply_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def list_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.from_user.id != ADMIN_ID:
        return
    cmd, key = query.data.split("_", 1)
    if cmd == "e":
        context.user_data["edit_key"] = key
        await query.edit_message_text(
            f"üìù –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{DATA[key]}\n\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
        )
        return EDIT_DESC
    elif cmd == "d":
        deleted_key = key
        del DATA[key]
        rewrite_data_docx()
        _notify_all_approved(context.application, [deleted_key], "deleted")
        await query.edit_message_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:\n\n<b>{deleted_key}</b>",
            parse_mode="HTML"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not is_approved(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        query = update.message.text.strip().lower()
        if not query:
            await update.message.reply_text("üîç –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
            return
        with SessionLocal() as session:
            session.add(SearchHistory(
                user_id=update.effective_user.id,
                username=update.effective_user.username or "N/A",
                query=query
            ))
            session.commit()

        matches = [(k, v) for k, v in DATA.items() if query in k or k in query][:7]
        if not matches:
            await update.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        lines = [f"<b>{escape(k.capitalize())}</b>\n{escape(v)}" for k, v in matches]
        text = "\n\n".join(lines)
        if len(matches) == 7:
            text += "\n\n<i>–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 7 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π</i>"
        await update.message.reply_text(text, parse_mode="HTML")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_message: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§∑‚Äç‚ôÇÔ∏è –ù—É –Ω—É –Ω—É, —Ä–∞–∑–æ–≥–Ω–∞–ª—Å—è... –ù–∞–∂–º–∏ /start")

# ---------- HANDLERS ----------
conv_add = ConversationHandler(
    entry_points=[CommandHandler("add", add_start, filters=filters.User(user_id=ADMIN_ID))],
    states={
        ADD_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_key)],
        ADD_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_desc)]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

conv_edit = ConversationHandler(
    entry_points=[CommandHandler("edit", edit_start, filters=filters.User(user_id=ADMIN_ID))],
    states={
        EDIT_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_key)],
        EDIT_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_desc)]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

conv_del = ConversationHandler(
    entry_points=[CommandHandler("del", del_start, filters=filters.User(user_id=ADMIN_ID))],
    states={
        DELETE_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, del_key)]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

conv_feedback = ConversationHandler(
    entry_points=[CommandHandler("feedback", feedback_start)],
    states={
        FEEDBACK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_receive)]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

conv_broadcast = ConversationHandler(
    entry_points=[CommandHandler("broadcast", broadcast_start, filters=filters.User(user_id=ADMIN_ID))],
    states={
        BROADCAST_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_send)]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

async def post_init(app: Application):
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand("feedback", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É")
    ]
    if ADMIN_ID:
        commands.extend([
            BotCommand("adduser", "–î–æ–±–∞–≤–∏—Ç—å/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id"),
            BotCommand("addusers", "–î–æ–±–∞–≤–∏—Ç—å –∏ –æ–¥–æ–±—Ä–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ id"),
            BotCommand("add", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"),
            BotCommand("edit", "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"),
            BotCommand("del", "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"),
            BotCommand("list", "–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π"),
            BotCommand("history", "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞"),
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("users", "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
            BotCommand("broadcast", "–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º (–∞–¥–º–∏–Ω)"),
            BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å")
        ])
    await app.bot.set_my_commands(commands)

def main():
    keep_alive()
    application = Application.builder().token(BOT_TOKEN).post_init(post_init).build()

    # –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_feedback)

    # –∞–¥–º–∏–Ω—Å–∫–∏–µ
    application.add_handler(CommandHandler("adduser", adduser, filters=filters.User(user_id=ADMIN_ID)))
    application.add_handler(CommandHandler("addusers", addusers, filters=filters.User(user_id=ADMIN_ID)))
    application.add_handler(CommandHandler("users", users_command, filters=filters.User(user_id=ADMIN_ID)))
    application.add_handler(CommandHandler("history", history_command, filters=filters.User(user_id=ADMIN_ID)))
    application.add_handler(CommandHandler("stats", stats_command, filters=filters.User(user_id=ADMIN_ID)))
    application.add_handler(CommandHandler("list", list_entries, filters=filters.User(user_id=ADMIN_ID)))
    application.add_handler(conv_add)
    application.add_handler(conv_edit)
    application.add_handler(conv_del)
    application.add_handler(conv_broadcast)

    # callback-–∏
    application.add_handler(CallbackQueryHandler(approve_callback, pattern="^approve_"))
    application.add_handler(CallbackQueryHandler(toggle_user_status, pattern="^toggle_"))
    application.add_handler(CallbackQueryHandler(list_button, pattern="^[ed]_"))

    # —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()
